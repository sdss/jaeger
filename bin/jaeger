#!/usr/bin/env python
# encoding: utf-8
#
# @Author: José Sánchez-Gallego
# @Date: Dec 1, 2017
# @Filename: jaeger
# @License: BSD 3-Clause
# @Copyright: José Sánchez-Gallego


from __future__ import absolute_import, division, print_function, unicode_literals

import asyncio
import logging

import click

from jaeger import log
from jaeger.commands.bootloader import load_firmware
from jaeger.fps import FPS


@click.group()
@click.option('-a', '--actor', is_flag=True, help='run as actor')
@click.option('-p', '--profile', type=str, help='the bus interface profile')
@click.option('-v', '--verbose', is_flag=True, help='debug mode')
@click.pass_context
def jaeger(ctx, actor=False, profile=None, verbose=False):

    if verbose:
        log.set_level(logging.DEBUG)

    ctx.obj['profile'] = profile

    if actor:
        fps_actor = FPS(profile=profile)
        fps_actor.start_actor()

        fps_actor.loop.run_forever()


@jaeger.command()
@click.argument('firmware-file', type=click.Path(exists=True))
@click.pass_context
def bootloader(ctx, firmware_file):

    profile = ctx.obj['profile']
    fps = FPS(profile=profile)

    load_firmware(fps, firmware_file)


if __name__ == '__main__':

    jaeger(obj={})
